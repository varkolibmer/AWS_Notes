DynamoDB: Writing Data
- PutItem
  - Creates a new item or fully replace an old item (same Primary Key)
  - Consumes WCUs
- UpdateItem
  - Edits an existing item's attributes or adds a new item if it doesn't exist
  - Can be used to implement Atomic Counters - a numeric attribute that is unconditionally incremented
- Conditional Writes
  - Accept a write/update/delete only if conditions are met, otherwise returns an error
  - Helps with concurrent access to items
  - No performance impact




DynamoDB: Reading Data
- GetItem
  - Read based on Primary Key
  - Primary Key can be HASH or HASH+RANGE
  - Eventually Consistent Read (default)
  - Option to use Strongly Consistent Reads (more RCU - might take longer)
  - Projection Expression can be specified to retrieve only certain attributes




DynamoDB: Reading Data (Query)
- Query returns items based on:
  - KeyConditionExpression
    - Partition Key Value (must be = operator): required
    - Sort Key Value (=, <, <=, >, >=, Between, Begins With): optional
  - FilterExpression
    - Additional filtering after the Query operation (before data returned to you)
    - Use only with non-key attributes (does not allow HASH or RANGE attributes)
- Returns:
  - The number of items specified in Limit
  - Or up to 1MB of data
- Ability to do pagination on the results
- Can query table, a Local Secondary Index, or a Global Secondary Index






DynamoDB: Reading Data (Scan)
- Scan the entire table and then filter out data (inefficient)
- Returns up to 1MB of data: use pagination to keep on reading
- Consumes a lot of RCU
- Limit impact using Limit or reduce the size of the result and pause
- For faster performance, use Parallel Scan
  - Multiple workers scan multiple data segments at the same time
  - Increases the throughput and RCU consumed
  - Limit the impact of parallel scans just like you would for Scans
- Can use ProjectionExpression and FilterExpression (no changes to RCU)





DynamoDB: Deleting Data
- DeleteItem
  - Delete an individual item
  - Ability to perform a conditional delete
- DeleteTable
  - Delete a whole table and all its items
  - Much quicker deletion than calling DeleteItem on all items





DynamoDB: Batch Operations
- Allows you to save in latency by reducing the number of API calls
- Operations are done in parallel for better efficiency
- Part of a batch can fail; in which case we need to try again for the failed items
- BatchWriteItem
  - Up for 25 PutItem and/or DeleteItem in one call
  - Up to 16 MB of data written, up to 400KB of data per item
  - Can't update items (use UpdateItem)
  - UnprocessedItems for failed write operations (exponential backoff or add WCU)
- BatchGetItem
  - Returns items from one or more tabled
  - Up to 100 items, up to 16 MB of data
  - Items are retrieved in parallel to minimize latency
  - UnprocessedKeys for failed read operations (exponential backoff or add RCU)





DynamoDB: PartiQL
- SQL-compatible query language for DynamoDB
- Allows you to select, insert, update, and delete data in DynamoDB using SQL
- Run queries across multiple DynamoDB tables
- Run PartiQL queries from:
  - AWS Management Console
  - NoSQL workbench for DynamoDB
  - DynamoDB APIs
  - AWS CLI
  - AWS SDK
- Use a SQL-like syntax to manipulate DynamoDB tables
- Supports some statements:
  - INSERT
  - UPDATE
  - SELECT
  - DELETE
- It supports batch operations

