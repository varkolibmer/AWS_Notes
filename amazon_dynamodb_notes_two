DynamoDB in Big Data
- Common Use Cases:
  - Mobile apps
  - Gaming
  - Digital ad serving
  - Live voting
  - Audience interaction for live events
  - Sensor networks
  - Log ingestion
  - Access control for web-based content
  - Metadata storage for Amazon S3 objects
  - E-commerce shopping carts
  - Web Session Management
- Anti-Pattern
  - Prewritten application tied to a traditional relational database: use RDS instead
  - Joins or complex transactions
  - Binary Large Object (BLOB) data: Store data in S3 and metadata in DynamoDB
  - Large data with low I/O rate: use S3 instead








DynamoDB: Read/Write Capacity Modes
- Control how you manage your table's capacity (read/write throughput)
- Provisioned Mode (default)
  - You specify the number of read/writes per second
  - You need to plan capacity beforehand
  - Pay for provisioned read and write capacity units
- On-Demand Mode
  - Read/writes automatically scale up/down with your workloads
  - No capacity planning needed
  - Pay for what you use, more expensive
- You can switch between different modes once every 24 hours









DynamoDB: Write Capacity Units (WCU)
- One WCU represents one write per second for an item up to 1KB in size
- If the items are larger than 1KB, more WCUs are consumed
- Example 1: we write 10 items per second, with item size 2KB
  - We need 10 x (2KB/1KB) = 20 WCUs
- Example 3: we write 120 items per minute, with item size 2 KB
  - We need (120/60) x (2KB/1KB) = 4 WCUs







Strongy Consistent Read vs. Eventually Consistent Read
- Eventually Consistent Read (default)
  - If we read just after a write, it's possible we'll get some stale data because of replication
- Strongly Consistent Read
  - If we read just after a write, we will get the correct data
  - Set "ConsistentRead" parameter to True in API calls (GetItem, BatchGetItem, Query, Scan)







DynamoDB: Read Capacity Unit (RCU)
- One RCU represents one Strongly Consistent Read per second, or two Eventually Consistent Reads per second, for an item up to 4KB in size
- If items are larger than 4KB, more RCUs are consumed
- Ex: 16 Eventually Consistent Reads per second, with item size 12 KB
  - We need (16/2) x (12KB/4KB) = 24 RCUs
- Ex: 10 strongly Consistent Reads per second, with item size 6 KB
  - We need 10 x (8KB/4KB) = 20 RCUs. Must round up 6KB to 8KB








DynamoDB: Partitions Internal
- Data is stored in partitions
- Partition Keys go through a hashing algorithm to know to which partition they go to
- WCUs and RCUs are spread evenly across partitions







DynamoDB: Throttling
- If we exceed provisioned RCUs or WCUs, we get "ProvisionedThroughputExceededException"
- Reasons:
  - Hot Keys: one partition key is being read too many times (ex: popular item)
  - Hot partitions
  - Very large items, remember RCU and WCU depends on size of items
- Solutions:
  - Exponential backoff when exception is encountered (already in SDK)
  - Distribute partition keys as much as possible
  - If RCU issue, we can use DynamoDB Accelerator (DAX)








R/W Capacity Modes: On-Demand
- Read/writes automatically scale up/down with your workloads
- No capacity planning needed (WCU/RCU)
- Unlimited WCU and RCU, no throttle, more expensive
- You're charged for reads/writes that you use in terms of RRU and WRU
- Read Request Units (RRU): throughput for reads (same as RCU)
- Write Request Units (WRU): throughput for writes (same as WCU)
- 2.5x more expensive than provisioned capacity (use with care)
- Use cases: unknown workloads, unpredictable application traffic, ...





